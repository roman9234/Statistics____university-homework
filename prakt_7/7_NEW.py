from scipy import stats



# Дисперсия (средний квадрат) -
# результат деления: суммы квадратов отклонений = E( (a_i-a_сред)^2 )
# на: число всех изменений = n

# Стандартное или среднее квадратическое отклонение - корень дисперсии


# Если A - фактор, то его дисперсия SA^2 = дисперсия фактора A
# Вычисляется по формуле E( (a_i-a_сред)^2 ) / k
# Где a - средние значения, полученные в результате воздействия фактора на случайный процесс


# Пусть S2 - генеральная дисперсия, а S2k - выборочная дисперсия включающая влияние фактора A
# Если S2 и S2k отличаются значимо, влияние фактора нужно признать значимым

# По свойству суммы двух независимых случайных величин:
# Дисперсия суммы двух независимых еличин равна сумме их дисперсий, след:
# S2k = S2 + S2A

# Тогда:
# S2A = S2k - S2

# ---- Двухфакторный анализ ----
# Одно наблюдение для каждого сочетания уровней изучаемых факторов

# Пусть 2 фактора A и B с уровнями A1 A2 A3 Ak,  B1 B2 B3 Bm

# num - номер выберки, 1 или 2
num = 1
# num = 2
# num = int(input("Введитеномер выборки: "))
table = []
if num == 1:
    table = [
        [3, 7, 3, 6, 6, 7, 6, 3, 8, 3],
        [6, 5, 7, 4, 9, 4, 3, 2, 7, 8],
        [8, 6, 3, 2, 7, 8, 6, 9, 3, 8],
        [4, 7, 7, 8, 6, 4, 5, 8, 4, 7],
        [6, 2, 6, 6, 8, 9, 7, 6, 8, 1]
    ]
if num == 2:
    table = [
        [3.83, 3.0, 2.7],
        [4.1, 3.13, 3.5],
        [3.63, 3.6, 3.2],
        [3.27, 3.5, 3.7]
    ]

# ТЕСТОВАЯ ВЫБОРКА
# table = [
#     [1,2,3],
#     [2,2,2],
#     [3,4,5]
# ]

# Длина строки = кол-во уровней фактора A
k = len(table[0])
# Высота столбца = кол-во уровней фактора B
m = len(table)

# X_IJ
# Средние по строкам номер J (горизонтальной линии)
x_j_avers = []
# Средние по столбцам номер I (вертикальному столбцу)
x_i_avers = []

# Вычислим средние по строкам и столбцам:
for j in range(m): # для каждой строки
    summ = 0
    for i in range(k): # для каждого столбца
        summ += table[j][i]
    x_j_avers.append(summ / k)

# Подсчет средних по столбцам
for i in range(k): # для каждого столбца
    summ = 0
    for j in range(m): # для каждой строки
        summ += table[j][i]
    x_i_avers.append(summ / m)

# Получим среднее значение по всей таблице
t_summ = 0
for q in range(len(table)):
    t_summ += sum(table[q])
x_aver = t_summ/(k * m)


# Средние по столбцам не зависят от фактора B
# Средние по строкам не зависят от фактора A

# На все средние значения оказывает влияние фактор случайности
# S02 / m для x̄i
# S02 / k для x̄j


# Средние по строкам номер J (горизонтальной)
print(x_j_avers)
# Средние по столбцам номер I (вертикальному)
print(x_i_avers)
# Среднее всей таблицы
# print(x_aver)


# S2A = S2k - S2


# Равенство 1 - несмещённая оценка дисперсии
# Умножаем смещённую оценку дисперсии выборки на k/(k-1) чтобы устранить смещение оценки дисперсии


#

# Σ( xij - x̄i )^2
part_1_1 = 0
# Σ( x̄j - x̄̄ )^2
part_1_2 = 0
for j in range(m):
    # (среднее по строкам - среднее)^2
    part_1_2 += (x_j_avers[j] - x_aver) ** 2
    for i in range(k):
        part_1_1 += (table[j][i] - x_i_avers[i]) ** 2

# Σ( x̄i - x̄̄ )^2
part_2 = 0
for i in range(k):
    part_2 += (x_i_avers[i] - x_aver) ** 2

print("Задание 1")
# Среднеквадратическое отклонение по формуле 3
S_0_squared = (1 / ((k - 1) * (m - 1)))* (part_1_1 - k * part_1_2)
print(f"Выборочная дисперсия от фактора случайности S_0^2: {S_0_squared}")
print("Задание 2-3")

s_nA_squared = (m / (k - 1)) * part_2
print(f"Выборочная дисперсия включающая влияние фактора A и дисперсию от фактора случайности S_nA^2: {round(s_nA_squared,4)}")
s_nB_squared = (k / (m - 1)) * part_1_2
print(f"Выборочная дисперсия включающая влияние фактора B и дисперсию от фактора случайности S_nB^2: {round(s_nB_squared,4)}")

print()
print("Задание 4-5")

# Сопоставляем по формуле 6 (и выше)

# F - критерий.
# F - критерий равен отношению выборочных дисперсий
# Если полученное значение F-статистики больше критического для определённого уровня значимости
# и соответствующих чисел степеней свободы для числителя и знаменателя, то дисперсии считаются значимо различающимися

# s_nA_squared - Выборочная дисперсия включающая влияние фактора A и дисперсию от фактора случайности
# S_0_squared - дисперсия фактора случайности
# s_nA_squared/S_0_squared доблжно быть больше F

# Уровень значимости 0.05 - веротяность что мы ошибочно отвергнем нулевую гипотезу
# Нулевая гипотеза — это предположение об отсутствии эффекта или связи между переменными
p = 0.05
# 1 - 0.05 = 0.95 - доверительная вероятность. Вероятность того, что мы не отвергнем нулевую гипотезу, если она истинна.

# Функция stats.f.ppf(q, dfn, dfd) вычисляет критическое значение F-распределения для заданного уровня доверия 0.95
# числителя степеней свободы  (k - 1)  и знаменателя степеней свободы  (k - 1) * (m - 1) .
F = stats.f.ppf(1 - p, (k - 1), (k - 1) * (m - 1))


s = 0
SA = 0
SB = 0

print(f"Соотношение s_nA_squared/S_0_squared = {s_nA_squared/S_0_squared}")
print(f"F для A = {F}")

# A
if s_nA_squared/S_0_squared > F:
    # Фактор A:
    SA = (s_nA_squared - S_0_squared) / m
    message_A = "значимый"
    print(f"SA^2 = {SA}")
else:
    message_A = "незначимый"
    s = ((k-1)*s_nA_squared+(m-1)*(k-1)*S_0_squared)/((k-1)+(m-1)*(k-1))
print(f"Фактор A - {message_A}")
print()




# B
F = stats.f.ppf(0.95, (m - 1), (m - 1) * (k - 1))
print(f"Соотношение s_nB_squared/S_0_squared = {s_nB_squared/S_0_squared}")
print(f"F для B = {F}")

if s_nB_squared/S_0_squared > F:
    # Фактор B:
    SB = (s_nB_squared - S_0_squared) / k
    message_B = "значимый"
    print(f"SB^2 = {SB}")
else:
    message_B = "незначимый"
    #
    s = ((m-1)*s_nB_squared+(m-1)*(k-1)*S_0_squared)/((m-1)+(m-1)*(k-1))
print(f"Фактор B - {message_A}")
print()


# Если оба фактора незначимые
if message_A == "незначимый" and message_B == "незначимый":
    print("Оба фактора незначимые")
    print("Оценка генеральной дисперсии по формуле 10:")
    s = ((k-1)*s_nA_squared+(m-1)*s_nB_squared+(k-1)*(m-1)*S_0_squared)/((k-1)+(m-1)+(k-1)*(m-1))


if SA != 0:
    print("Оценка фактора А:", round(SA,2))
if SB != 0:
    print("Оценка фактора B:", round(SB,2))
if s != 0:
    print(f"Оценка генеральной дисперсии S^2: {round(s,4)}")

